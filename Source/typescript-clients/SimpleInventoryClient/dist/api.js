/**
 * Simple Inventory API
 * This is a simple API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var url = require("url");
var isomorphicFetch = require("isomorphic-fetch");
var BASE_PATH = "https://virtserver.swaggerhub.com/MikeWay/SimplePurchase/1.0.0".replace(/\/+$/, '');
var BaseAPI = (function () {
    function BaseAPI(fetch, basePath) {
        if (fetch === void 0) { fetch = isomorphicFetch; }
        if (basePath === void 0) { basePath = BASE_PATH; }
        this.basePath = basePath;
        this.fetch = fetch;
    }
    return BaseAPI;
}());
exports.BaseAPI = BaseAPI;
/**
 * DevelopersApi - fetch parameter creator
 */
exports.DevelopersApiFetchParamCreactor = {
    /**
     * Returns the number of days to get an item into stock
     * By passing in the itemId it will return the number of days to fulfill the stock
     * @param itemId pass an optional search string for looking up inventory
     */
    searchInventory: function (params) {
        // verify required parameter "itemId" is set
        if (params["itemId"] == null) {
            throw new Error("Missing required parameter itemId when calling searchInventory");
        }
        var baseUrl = "/leadTime/{itemId}"
            .replace("{" + "itemId" + "}", "" + params.itemId);
        var urlObj = url.parse(baseUrl, true);
        var fetchOptions = { method: "GET" };
        var contentTypeHeader;
        if (contentTypeHeader) {
            fetchOptions.headers = contentTypeHeader;
        }
        return {
            url: url.format(urlObj),
            options: fetchOptions,
        };
    },
};
/**
 * DevelopersApi - functional programming interface
 */
exports.DevelopersApiFp = {
    /**
     * Returns the number of days to get an item into stock
     * By passing in the itemId it will return the number of days to fulfill the stock
     * @param itemId pass an optional search string for looking up inventory
     */
    searchInventory: function (params) {
        var fetchArgs = exports.DevelopersApiFetchParamCreactor.searchInventory(params);
        return function (fetch, basePath) {
            if (fetch === void 0) { fetch = isomorphicFetch; }
            if (basePath === void 0) { basePath = BASE_PATH; }
            return fetch(basePath + fetchArgs.url, fetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                }
                else {
                    throw response;
                }
            });
        };
    },
};
/**
 * DevelopersApi - object-oriented interface
 */
var DevelopersApi = (function (_super) {
    __extends(DevelopersApi, _super);
    function DevelopersApi() {
        _super.apply(this, arguments);
    }
    /**
     * Returns the number of days to get an item into stock
     * By passing in the itemId it will return the number of days to fulfill the stock
     * @param itemId pass an optional search string for looking up inventory
     */
    DevelopersApi.prototype.searchInventory = function (params) {
        return exports.DevelopersApiFp.searchInventory(params)(this.fetch, this.basePath);
    };
    return DevelopersApi;
}(BaseAPI));
exports.DevelopersApi = DevelopersApi;
;
/**
 * DevelopersApi - factory interface
 */
exports.DevelopersApiFactory = function (fetch, basePath) {
    return {
        /**
         * Returns the number of days to get an item into stock
         * By passing in the itemId it will return the number of days to fulfill the stock
         * @param itemId pass an optional search string for looking up inventory
         */
        searchInventory: function (params) {
            return exports.DevelopersApiFp.searchInventory(params)(fetch, basePath);
        },
    };
};
